{"version":3,"sources":["../../src/midi/midi_input.js"],"names":["nodejs","MIDIInput","info","id","name","manufacturer","version","type","state","connection","port","_inLongSysexMessage","_sysexBuffer","Uint8Array","_midiProc","midiProc","bind","onstatechange","_onmidimessage","Object","defineProperty","set","value","midiInOpen","connect","msg","_listeners","listener","listeners","get","has","add","delete","evt","forEach","openMidiIn","and","err","console","log","close","or","clear","data","oldLength","length","tmpBuffer","initialOffset","j","_appendToSysexBuffer","slice","timestamp","i","isSysexMessage","isValidMessage","_bufferLongSysex","e","receivedTime","dispatchEvent"],"mappings":"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","file":"midi_input.js","sourcesContent":["/*\n  MIDIInput is a wrapper around an input of a Jazz instance\n*/\nimport Jzz from '../util/jzz';\nimport MIDIMessageEvent from './midimessage_event';\nimport MIDIConnectionEvent from './midiconnection_event';\nimport { dispatchEvent } from './midi_access';\nimport { generateUUID, getDevice } from '../util/util';\nimport Store from '../util/store';\n\nconst nodejs = getDevice().nodejs\n\nexport default class MIDIInput {\n    constructor(info) {\n        this.id = info.id || generateUUID();\n        this.name = info.name;\n        this.manufacturer = info.manufacturer;\n        this.version = info.version;\n        this.type = 'input';\n        this.state = 'connected';\n        this.connection = 'pending';\n        this.port = null;\n        this._inLongSysexMessage = false;\n        this._sysexBuffer = new Uint8Array();\n        this._midiProc = midiProc.bind(this);\n\n        this.onstatechange = null;\n        this._onmidimessage = null;\n\n        // because we need to implicitly open the device when an onmidimessage handler gets added\n        // we define a setter that opens the device if the set value is a function\n        Object.defineProperty(this, 'onmidimessage', {\n            set(value) {\n                this._onmidimessage = value;\n                if (typeof value === 'function') {\n                    // if (this.port === null) {\n                    //     this.open();\n                    // }\n                    Jzz().midiInOpen(this.name).connect((msg) => {\n                        this._midiProc(0, msg);\n                        // const m = new MIDIMessageEvent(this, msg);\n                        // value(m);\n                    });\n                }\n            }\n        });\n\n        this._listeners = new Store()\n            .set('midimessage', new Store())\n            .set('statechange', new Store());\n    }\n\n    addEventListener(type, listener) {\n        const listeners = this._listeners.get(type);\n        if (typeof listeners === 'undefined') {\n            return;\n        }\n\n        if (listeners.has(listener) === false) {\n            listeners.add(listener);\n        }\n    }\n\n    removeEventListener(type, listener) {\n        const listeners = this._listeners.get(type);\n        if (typeof listeners === 'undefined') {\n            return;\n        }\n\n        if (listeners.has(listener) === true) {\n            listeners.delete(listener);\n        }\n    }\n\n    dispatchEvent(evt) {\n        const listeners = this._listeners.get(evt.type);\n        listeners.forEach((listener) => {\n            listener(evt);\n        });\n\n        if (evt.type === 'midimessage') {\n            if (this._onmidimessage !== null) {\n                this._onmidimessage(evt);\n            }\n        } else if (evt.type === 'statechange') {\n            if (this.onstatechange !== null) {\n                this.onstatechange(evt);\n            }\n        }\n    }\n\n    open() {\n        if (this.connection === 'open') {\n            return;\n        }\n        this.port = Jzz().openMidiIn(this.name)\n            // .or(`Could not open input ${this.name}`)\n            .and(() => {\n                this.connection = 'open';\n                dispatchEvent(this); // dispatch MIDIConnectionEvent via MIDIAccess\n            })\n            .err((err) => { console.log(err); })\n    }\n\n    close() {\n        if (this.connection === 'closed') {\n            return;\n        }\n        this.port.close()\n            .or(`Could not close input ${this.name}`)\n            .and(() => {\n                this.connection = 'closed';\n                dispatchEvent(this); // dispatch MIDIConnectionEvent via MIDIAccess\n                this.port = null;\n                this._onmidimessage = null;\n                this.onstatechange = null;\n                this._listeners.get('midimessage').clear();\n                this._listeners.get('statechange').clear();\n            });\n    }\n\n    _appendToSysexBuffer(data) {\n        const oldLength = this._sysexBuffer.length;\n        const tmpBuffer = new Uint8Array(oldLength + data.length);\n        tmpBuffer.set(this._sysexBuffer);\n        tmpBuffer.set(data, oldLength);\n        this._sysexBuffer = tmpBuffer;\n    }\n\n    _bufferLongSysex(data, initialOffset) {\n        let j = initialOffset;\n        while (j < data.length) {\n            if (data[j] == 0xF7) {\n                // end of sysex!\n                j += 1;\n                this._appendToSysexBuffer(data.slice(initialOffset, j));\n                return j;\n            }\n            j += 1;\n        }\n        // didn't reach the end; just tack it on.\n        this._appendToSysexBuffer(data.slice(initialOffset, j));\n        this._inLongSysexMessage = true;\n        return j;\n    }\n}\n\n\nfunction midiProc(timestamp, data) {\n    let length = 0;\n    let i;\n    let isSysexMessage = false;\n\n    console.log(timestamp, data);\n\n    // Jazz sometimes passes us multiple messages at once, so we need to parse them out and pass them one at a time.\n\n    for (i = 0; i < data.length; i += length) {\n        let isValidMessage = true;\n        if (this._inLongSysexMessage) {\n            i = this._bufferLongSysex(data, i);\n            if (data[i - 1] != 0xf7) {\n                // ran off the end without hitting the end of the sysex message\n                return;\n            }\n            isSysexMessage = true;\n        } else {\n            isSysexMessage = false;\n            switch (data[i] & 0xF0) {\n            case 0x00: // Chew up spurious 0x00 bytes.  Fixes a Windows problem.\n                length = 1;\n                isValidMessage = false;\n                break;\n\n            case 0x80: // note off\n            case 0x90: // note on\n            case 0xA0: // polyphonic aftertouch\n            case 0xB0: // control change\n            case 0xE0: // channel mode\n                length = 3;\n                break;\n\n            case 0xC0: // program change\n            case 0xD0: // channel aftertouch\n                length = 2;\n                break;\n\n            case 0xF0:\n                switch (data[i]) {\n                case 0xf0: // letiable-length sysex.\n                    i = this._bufferLongSysex(data, i);\n                    if (data[i - 1] != 0xf7) {\n                        // ran off the end without hitting the end of the sysex message\n                        return;\n                    }\n                    isSysexMessage = true;\n                    break;\n\n                case 0xF1: // MTC quarter frame\n                case 0xF3: // song select\n                    length = 2;\n                    break;\n\n                case 0xF2: // song position pointer\n                    length = 3;\n                    break;\n\n                default:\n                    length = 1;\n                    break;\n                }\n                break;\n            }\n        }\n        if (!isValidMessage) {\n            continue;\n        }\n\n        const evt = {};\n        // evt.receivedTime = parseFloat(timestamp.toString()) + this._jazzInstance._perfTimeZero;\n\n        if (isSysexMessage || this._inLongSysexMessage) {\n            evt.data = new Uint8Array(this._sysexBuffer);\n            this._sysexBuffer = new Uint8Array(0);\n            this._inLongSysexMessage = false;\n        } else {\n            evt.data = new Uint8Array(data.slice(i, length + i));\n        }\n\n        if (nodejs) {\n            if (this._onmidimessage) {\n                this._onmidimessage(evt);\n            }\n        } else {\n            const e = new MIDIMessageEvent(this, evt.data, evt.receivedTime);\n            this.dispatchEvent(e);\n        }\n    }\n}\n"]}