{"version":3,"sources":["../../src/midi/midi_input.js"],"names":["MIDIInput","info","id","name","manufacturer","version","type","state","connection","port","onstatechange","_onmidimessage","Object","defineProperty","set","value","open","connect","msg","m","_listeners","listener","listeners","get","has","add","delete","evt","forEach","openMidiIn","or","and","close","clear"],"mappings":"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","file":"midi_input.js","sourcesContent":["/*\n  MIDIInput is a wrapper around an input of a Jazz instance\n*/\nimport Jzz from '../util/jzz';\nimport MIDIMessageEvent from './midimessage_event';\nimport MIDIConnectionEvent from './midiconnection_event';\nimport { dispatchEvent } from './midi_access';\nimport { generateUUID } from '../util/util';\nimport Store from '../util/store';\n\nexport default class MIDIInput {\n    constructor(info) {\n        this.id = info.id || generateUUID();\n        this.name = info.name;\n        this.manufacturer = info.manufacturer;\n        this.version = info.version;\n        this.type = 'input';\n        this.state = 'connected';\n        this.connection = 'pending';\n        this.port = null;\n\n        this.onstatechange = null;\n        this._onmidimessage = null;\n\n        // because we need to implicitly open the device when an onmidimessage handler gets added\n        // we define a setter that opens the device if the set value is a function\n        Object.defineProperty(this, 'onmidimessage', {\n            set(value) {\n                this._onmidimessage = value;\n                if (typeof value === 'function') {\n                    if (this.port === null) {\n                        this.open();\n                    }\n                    this.port.connect((msg) => {\n                        const m = new MIDIMessageEvent(this, msg);\n                        value(m);\n                    });\n                }\n            }\n        });\n\n        this._listeners = new Store()\n            .set('midimessage', new Store())\n            .set('statechange', new Store());\n    }\n\n    addEventListener(type, listener) {\n        const listeners = this._listeners.get(type);\n        if (typeof listeners === 'undefined') {\n            return;\n        }\n\n        if (listeners.has(listener) === false) {\n            listeners.add(listener);\n        }\n    }\n\n    removeEventListener(type, listener) {\n        const listeners = this._listeners.get(type);\n        if (typeof listeners === 'undefined') {\n            return;\n        }\n\n        if (listeners.has(listener) === true) {\n            listeners.delete(listener);\n        }\n    }\n\n    dispatchEvent(evt) {\n        const listeners = this._listeners.get(evt.type);\n        listeners.forEach((listener) => {\n            listener(evt);\n        });\n\n        if (evt.type === 'midimessage') {\n            if (this._onmidimessage !== null) {\n                this._onmidimessage(evt);\n            }\n        } else if (evt.type === 'statechange') {\n            if (this.onstatechange !== null) {\n                this.onstatechange(evt);\n            }\n        }\n    }\n\n    open() {\n        if (this.connection === 'open') {\n            return;\n        }\n        this.port = Jzz().openMidiIn(this.name)\n            .or(`Could not open input ${this.name}`)\n            .and(() => {\n                this.connection = 'open';\n                dispatchEvent(this); // dispatch MIDIConnectionEvent via MIDIAccess\n            });\n    }\n\n    close() {\n        if (this.connection === 'closed') {\n            return;\n        }\n        this.port.close()\n            .or(`Could not close input ${this.name}`)\n            .and(() => {\n                this.connection = 'closed';\n                dispatchEvent(this); // dispatch MIDIConnectionEvent via MIDIAccess\n                this.port = null;\n                this._onmidimessage = null;\n                this.onstatechange = null;\n                this._listeners.get('midimessage').clear();\n                this._listeners.get('statechange').clear();\n            });\n    }\n}\n"]}