{"version":3,"sources":["../../src/midi/midi_output.js"],"names":["MIDIOutput","info","id","name","manufacturer","version","type","state","connection","onmidimessage","onstatechange","port","_listeners","openMidiOut","or","and","close","clear","data","timestamp","delayBeforeSend","Math","floor","performance","now","wait","send","listener","has","add","delete","evt","forEach"],"mappings":";;;;;;qjBAAA;;;;;AAGA;;;;AACA;;AACA;;;;AACA;;;;;;IAEqBA,U;AACjB,wBAAYC,IAAZ,EAAkB;AAAA;;AACd,aAAKC,EAAL,GAAUD,KAAKC,EAAL,IAAW,yBAArB;AACA,aAAKC,IAAL,GAAYF,KAAKE,IAAjB;AACA,aAAKC,YAAL,GAAoBH,KAAKG,YAAzB;AACA,aAAKC,OAAL,GAAeJ,KAAKI,OAApB;AACA,aAAKC,IAAL,GAAY,QAAZ;AACA,aAAKC,KAAL,GAAa,WAAb;AACA,aAAKC,UAAL,GAAkB,SAAlB;AACA,aAAKC,aAAL,GAAqB,IAArB;AACA,aAAKC,aAAL,GAAqB,IAArB;AACA,aAAKC,IAAL,GAAY,IAAZ;;AAEA,aAAKC,UAAL,GAAkB,qBAAlB;AACH;;;;+BAEM;AAAA;;AACH,gBAAI,KAAKJ,UAAL,KAAoB,MAAxB,EAAgC;AAC5B;AACH;AACD,iBAAKG,IAAL,GAAY,qBAAME,WAAN,CAAkB,KAAKV,IAAvB,EACPW,EADO,2BACoB,KAAKX,IADzB,EAEPY,GAFO,CAEH,YAAM;AACP,sBAAKP,UAAL,GAAkB,MAAlB;AACA,uDAFO,CAEc;AACxB,aALO,CAAZ;AAMH;;;gCAEO;AAAA;;AACJ,gBAAI,KAAKA,UAAL,KAAoB,QAAxB,EAAkC;AAC9B;AACH;AACD,iBAAKG,IAAL,CAAUK,KAAV,GACKF,EADL,6BACkC,KAAKX,IADvC,EAEKY,GAFL,CAES,YAAM;AACP,uBAAKP,UAAL,GAAkB,QAAlB;AACA,wDAFO,CAEc;AACrB,uBAAKE,aAAL,GAAqB,IAArB;AACA,uBAAKE,UAAL,CAAgBK,KAAhB;AACH,aAPL;AAQH;;;6BAEIC,I,EAAqB;AAAA,gBAAfC,SAAe,uEAAH,CAAG;;AACtB,gBAAIC,kBAAkB,CAAtB;AACA,gBAAID,cAAc,CAAlB,EAAqB;AACjBC,kCAAkBC,KAAKC,KAAL,CAAWH,YAAYI,YAAYC,GAAZ,EAAvB,CAAlB;AACH;;AAED,iBAAKb,IAAL,CACKc,IADL,CACUL,eADV,EAEKM,IAFL,CAEUR,IAFV;;AAIA,mBAAO,IAAP;AACH;;;gCAEO;AACJ;AACH;;;yCAEgBZ,I,EAAMqB,Q,EAAU;AAC7B,gBAAIrB,SAAS,aAAb,EAA4B;AACxB;AACH;;AAED,gBAAI,KAAKM,UAAL,CAAgBgB,GAAhB,CAAoBD,QAApB,MAAkC,KAAtC,EAA6C;AACzC,qBAAKf,UAAL,CAAgBiB,GAAhB,CAAoBF,QAApB;AACH;AACJ;;;4CAEmBrB,I,EAAMqB,Q,EAAU;AAChC,gBAAIrB,SAAS,aAAb,EAA4B;AACxB;AACH;;AAED,gBAAI,KAAKM,UAAL,CAAgBgB,GAAhB,CAAoBD,QAApB,MAAkC,IAAtC,EAA4C;AACxC,qBAAKf,UAAL,CAAgBkB,MAAhB,CAAuBH,QAAvB;AACH;AACJ;;;sCAEaI,G,EAAK;AACf,iBAAKnB,UAAL,CAAgBoB,OAAhB,CAAwB,UAACL,QAAD,EAAc;AAClCA,yBAASI,GAAT;AACH,aAFD;;AAIA,gBAAI,KAAKrB,aAAL,KAAuB,IAA3B,EAAiC;AAC7B,qBAAKA,aAAL,CAAmBqB,GAAnB;AACH;AACJ;;;;;;kBAvFgB/B,U","file":"midi_output.js","sourcesContent":["/*\n  MIDIOutput is a wrapper around an output of a Jazz instance\n*/\nimport Jzz from '../util/jzz';\nimport { generateUUID } from '../util/util';\nimport Store from '../util/store';\nimport { dispatchEvent } from './midi_access';\n\nexport default class MIDIOutput {\n    constructor(info) {\n        this.id = info.id || generateUUID();\n        this.name = info.name;\n        this.manufacturer = info.manufacturer;\n        this.version = info.version;\n        this.type = 'output';\n        this.state = 'connected';\n        this.connection = 'pending';\n        this.onmidimessage = null;\n        this.onstatechange = null;\n        this.port = null;\n\n        this._listeners = new Store();\n    }\n\n    open() {\n        if (this.connection === 'open') {\n            return;\n        }\n        this.port = Jzz().openMidiOut(this.name)\n            .or(`Could not open input ${this.name}`)\n            .and(() => {\n                this.connection = 'open';\n                dispatchEvent(this); // dispatch MIDIConnectionEvent via MIDIAccess\n            });\n    }\n\n    close() {\n        if (this.connection === 'closed') {\n            return;\n        }\n        this.port.close()\n            .or(`Could not close output ${this.name}`)\n            .and(() => {\n                this.connection = 'closed';\n                dispatchEvent(this); // dispatch MIDIConnectionEvent via MIDIAccess\n                this.onstatechange = null;\n                this._listeners.clear();\n            })\n    }\n\n    send(data, timestamp = 0) {\n        let delayBeforeSend = 0;\n        if (timestamp !== 0) {\n            delayBeforeSend = Math.floor(timestamp - performance.now());\n        }\n\n        this.port\n            .wait(delayBeforeSend)\n            .send(data);\n\n        return true;\n    }\n\n    clear() {\n        // to be implemented\n    }\n\n    addEventListener(type, listener) {\n        if (type !== 'statechange') {\n            return;\n        }\n\n        if (this._listeners.has(listener) === false) {\n            this._listeners.add(listener);\n        }\n    }\n\n    removeEventListener(type, listener) {\n        if (type !== 'statechange') {\n            return;\n        }\n\n        if (this._listeners.has(listener) === true) {\n            this._listeners.delete(listener);\n        }\n    }\n\n    dispatchEvent(evt) {\n        this._listeners.forEach((listener) => {\n            listener(evt);\n        });\n\n        if (this.onstatechange !== null) {\n            this.onstatechange(evt);\n        }\n    }\n}\n"]}