{"version":3,"sources":["../../src/midi/midi_access.js"],"names":["getMIDIPorts","createMIDIAccess","dispatchEvent","midiAccess","listeners","midiInputs","midiOutputs","MIDIAccess","inputs","outputs","sysexEnabled","type","listener","has","add","delete","clear","info","forEach","port","set","id","Promise","resolve","reject","browser","message","or","and","err","msg","evt","onstatechange"],"mappings":";;;;;;qjBAAA;;;;;;;;;;;;QAiDgBA,Y,GAAAA,Y;QAcAC,gB,GAAAA,gB;QA6BAC,a,GAAAA,a;;AAlFhB;;;;AACA;;;;AACA;;;;AACA;;;;AACA;;AACA;;;;;;;;AAEA,IAAIC,mBAAJ;AACA,IAAMC,YAAY,qBAAlB;AACA,IAAMC,aAAa,qBAAnB;AACA,IAAMC,cAAc,qBAApB;;IAEMC,U;AACF,wBAAYC,MAAZ,EAAoBC,OAApB,EAA6B;AAAA;;AACzB,aAAKC,YAAL,GAAoB,IAApB;AACA,aAAKF,MAAL,GAAcA,MAAd;AACA,aAAKC,OAAL,GAAeA,OAAf;AACH;;;;yCAEgBE,I,EAAMC,Q,EAAU;AAC7B,gBAAID,SAAS,aAAb,EAA4B;AACxB;AACH;AACD,gBAAIP,UAAUS,GAAV,CAAcD,QAAd,MAA4B,KAAhC,EAAuC;AACnCR,0BAAUU,GAAV,CAAcF,QAAd;AACH;AACJ;;;4CAEmBD,I,EAAMC,Q,EAAU;AAChC,gBAAID,SAAS,aAAb,EAA4B;AACxB;AACH;AACD,gBAAIP,UAAUS,GAAV,CAAcD,QAAd,MAA4B,IAAhC,EAAsC;AAClCR,0BAAUW,MAAV,CAAiBH,QAAjB;AACH;AACJ;;;;;;AAIE,SAASZ,YAAT,GAAwB;AAC3BK,eAAWW,KAAX;AACAV,gBAAYU,KAAZ;AACA,yBAAMC,IAAN,GAAaT,MAAb,CAAoBU,OAApB,CAA4B,gBAAQ;AAChC,YAAIC,OAAO,yBAAcF,IAAd,CAAX;AACAZ,mBAAWe,GAAX,CAAeD,KAAKE,EAApB,EAAwBF,IAAxB;AACH,KAHD;AAIA,yBAAMF,IAAN,GAAaR,OAAb,CAAqBS,OAArB,CAA6B,gBAAQ;AACjC,YAAIC,OAAO,0BAAeF,IAAf,CAAX;AACAX,oBAAYc,GAAZ,CAAgBD,KAAKE,EAArB,EAAyBF,IAAzB;AACH,KAHD;AAIH;;AAGM,SAASlB,gBAAT,GAA4B;AAC/B,WAAO,IAAIqB,OAAJ,CAAa,UAACC,OAAD,EAAUC,MAAV,EAAqB;AACrC,YAAI,OAAOrB,UAAP,KAAsB,WAA1B,EAAuC;AACnCoB,oBAAQpB,UAAR;AACA;AACH;;AAED,YAAI,uBAAYsB,OAAZ,KAAwB,KAA5B,EAAmC;AAC/BD,mBAAO,EAAEE,SAAS,yDAAX,EAAP;AACA;AACH;AACD,6BACKC,EADL,CACQ,YAAM;AACNH,mBAAO,EAAEE,SAAS,oIAAX,EAAP;AACH,SAHL,EAIKE,GAJL,CAIS,YAAM;AACP5B;AACAG,yBAAa,IAAII,UAAJ,CAAeF,UAAf,EAA2BC,WAA3B,CAAb;AACAiB,oBAAQpB,UAAR;AACH,SARL,EASK0B,GATL,CASS,UAACC,GAAD,EAAS;AACVN,mBAAOM,GAAP;AACH,SAXL;AAYH,KAtBM,CAAP;AAuBH;;AAGD;AACA;AACO,SAAS5B,aAAT,CAAuBiB,IAAvB,EAA6B;AAChCA,SAAKjB,aAAL,CAAmB,mCAAwBiB,IAAxB,EAA8BA,IAA9B,CAAnB;;AAEA,QAAMY,MAAM,mCAAwB5B,UAAxB,EAAoCgB,IAApC,CAAZ;;AAEA,QAAI,OAAOhB,WAAW6B,aAAlB,KAAoC,UAAxC,EAAoD;AAChD7B,mBAAW6B,aAAX,CAAyBD,GAAzB;AACH;AACD3B,cAAUc,OAAV,CAAkB;AAAA,eAAYN,SAASmB,GAAT,CAAZ;AAAA,KAAlB;AACH","file":"midi_access.js","sourcesContent":["/*\n  Creates a MIDIAccess instance:\n  - Creates MIDIInput and MIDIOutput instances for the initially connected MIDI devices.\n  - Keeps track of newly connected devices and creates the necessary instances of MIDIInput and MIDIOutput.\n  - Keeps track of disconnected devices and removes them from the inputs and/or outputs map.\n  - Creates a unique id for every device and stores these ids by the name of the device:\n    so when a device gets disconnected and reconnected again, it will still have the same id. This\n    is in line with the behavior of the native MIDIAccess object.\n\n*/\nimport Jzz from '../util/jzz';\nimport MIDIInput from './midi_input';\nimport MIDIOutput from './midi_output';\nimport MIDIConnectionEvent from './midiconnection_event';\nimport { getDevice } from '../util/util';\nimport Store from '../util/store';\n\nlet midiAccess;\nconst listeners = new Store();\nconst midiInputs = new Store();\nconst midiOutputs = new Store();\n\nclass MIDIAccess {\n    constructor(inputs, outputs) {\n        this.sysexEnabled = true;\n        this.inputs = inputs;\n        this.outputs = outputs;\n    }\n\n    addEventListener(type, listener) {\n        if (type !== 'statechange') {\n            return;\n        }\n        if (listeners.has(listener) === false) {\n            listeners.add(listener);\n        }\n    }\n\n    removeEventListener(type, listener) {\n        if (type !== 'statechange') {\n            return;\n        }\n        if (listeners.has(listener) === true) {\n            listeners.delete(listener);\n        }\n    }\n}\n\n\nexport function getMIDIPorts() {\n    midiInputs.clear();\n    midiOutputs.clear();\n    Jzz().info().inputs.forEach(info => {\n        let port = new MIDIInput(info);\n        midiInputs.set(port.id, port);\n    });\n    Jzz().info().outputs.forEach(info => {\n        let port = new MIDIOutput(info);\n        midiOutputs.set(port.id, port);\n    });\n}\n\n\nexport function createMIDIAccess() {\n    return new Promise(((resolve, reject) => {\n        if (typeof midiAccess !== 'undefined') {\n            resolve(midiAccess);\n            return;\n        }\n\n        if (getDevice().browser === 'ie9') {\n            reject({ message: 'WebMIDIAPIShim supports Internet Explorer 10 and above.' });\n            return;\n        }\n        Jzz()\n            .or(() => {\n                reject({ message: 'No access to MIDI devices: your browser does not support the WebMIDI API and the Jazz extension (or Jazz plugin) is not installed.' });\n            })\n            .and(() => {\n                getMIDIPorts();\n                midiAccess = new MIDIAccess(midiInputs, midiOutputs);\n                resolve(midiAccess);\n            })\n            .err((msg) => {\n                reject(msg);\n            })\n    }));\n}\n\n\n// when a device gets connected/disconnected both the port and MIDIAccess dispatch a MIDIConnectionEvent\n// therefor we call the ports dispatchEvent function here as well\nexport function dispatchEvent(port) {\n    port.dispatchEvent(new MIDIConnectionEvent(port, port));\n\n    const evt = new MIDIConnectionEvent(midiAccess, port);\n\n    if (typeof midiAccess.onstatechange === 'function') {\n        midiAccess.onstatechange(evt);\n    }\n    listeners.forEach(listener => listener(evt));\n}\n"]}